{
  "hits": [
    {
      "keywords": [],
      "title": "OpenSearch (search service)",
      "section": "Add services",
      "text": " OpenSearch is a distributed RESTful search engine built for the cloud. See the OpenSearch documentation for more information. To switch from Elasticsearch, follow the same procedure as for upgrading. Supported versions Grid Dedicated Gen 3 Dedicated Gen 2 2 1 2 2.5 1.2 On Grid and Dedicated Gen 3, from version 2, you only specify the major version. The latest compatible minor version and patches are applied automatically. On Grid, version 1 represents a rolling release - the latest minor version available from the upstream (starting with opensearch 1.3). You can see the latest minor and patch versions of OpenSearch available from the 2.x and 1.x release lines. Deprecated versions The following versions are still available in your projects, but they’re at their end of life and are no longer receiving security updates from upstream, or are no longer the recommended way to configure the service on Platform.sh. Grid Dedicated Gen 3 Dedicated Gen 2 1.2 1.1 To ensure your project remains stable in the future, switch to a supported version. Relationship reference Example information available through the PLATFORM_RELATIONSHIPS environment variable or by running platform relationships. Note that the information about the relationship can change when an app is redeployed or restarted or the relationship is changed. So your apps should only rely on the PLATFORM_RELATIONSHIPS environment variable directly rather than hard coding any values. { username : null, scheme : http , service : opensearch , fragment : null, ip : 169.254.99.100 , hostname : azertyuiopqsdfghjklm.opensearch.service._.eu-1.platformsh.site , port : 9200, cluster : azertyuiopqsdf-main-7rqtwti , host : opensearch.internal , rel : opensearch , path : null, query : [], password : ChangeMe , type : opensearch:2 , public : false, host_mapped : false } Usage example 1. Configure the service To define the service, use the opensearch type: .platform/services.yaml # The name of the service container. Must be unique within a project. &lt;SERVICE_NAME&gt;: type: opensearch:&lt;VERSION&gt; disk: 256 Note that changing the name of the service replaces it with a brand new service and all existing data is lost. Back up your data before changing the service. 2. Add the relationship To define the relationship, use the following configuration: .platform/applications.yaml # Relationships enable access from this app to a given service. # The example below shows simplified configuration leveraging a default service # (identified from the relationship name) and a default endpoint. # See the Application reference for all options for defining relationships and endpoints. relationships: &lt;SERVICE_NAME&gt;: You can define &lt;SERVICE_NAME&gt; as you like, so long as it’s unique between all defined services and matches in both the application and services configuration. The example above leverages default endpoint configuration for relationships. That is, it uses default endpoints behind-the-scenes, providing a relationship (the network address a service is accessible from) that is identical to the name of that service. Depending on your needs, instead of default endpoint configuration, you can use explicit endpoint configuration. With the above definition, the application container now has access to the service via the relationship &lt;RELATIONSHIP_NAME&gt; and its corresponding PLATFORM_RELATIONSHIPS environment variable. Example configuration Service definition .platform/services.yaml # The name of the service container. Must be unique within a project. opensearch: type: opensearch:2 disk: 256 App configuration .platform/applications.yaml # Relationships enable access from this app to a given service. # The example below shows simplified configuration leveraging a default service # (identified from the relationship name) and a default endpoint. # See the Application reference for all options for defining relationships and endpoints. relationships: opensearch: Use in app To use the configured service in your app, add a configuration file similar to the following to your project. .platform.app.yaml name: myapp [...] relationships: opensearch: This configuration defines a single application (myapp), whose source code exists in the &lt;PROJECT_ROOT&gt;/myapp directory. myapp has access to the opensearch service, via a relationship whose name is identical to the service name (as per default endpoint configuration for relationships). From this, myapp can retrieve access credentials to the service through the environment variable PLATFORM_RELATIONSHIPS. That variable is a base64-encoded JSON object, but can be decoded at runtime (using the built-in tool jq) to provide more accessible environment variables to use within the application itself: myapp/.environment # Decode the built-in credentials object variable. export RELATIONSHIPS_JSON=$(echo $PLATFORM_RELATIONSHIPS | base64 --decode) # Set environment variables for individual credentials. export OS_SCHEME=$(echo $RELATIONSHIPS_JSON | jq -r .opensearch[0].scheme ) export OS_HOST=$(echo $RELATIONSHIPS_JSON | jq -r .opensearch[0].host ) export OS_PORT=$(echo $RELATIONSHIPS_JSON | jq -r .opensearch[0].port ) # Surface more common OpenSearch connection string variables for use in app. export OPENSEARCH_USERNAME=$(echo $RELATIONSHIPS_JSON | jq -r .opensearch[0].username ) export OPENSEARCH_PASSWORD=$(echo $RELATIONSHIPS_JSON | jq -r .opensearch[0].password ) export The above file — .environment in the myapp directory — is automatically sourced by Platform.sh into the runtime environment, so that the variable OPENSEARCH_HOSTS can be used within the application to connect to the service. Note that OPENSEARCH_HOSTS and all Platform.sh-provided environment variables like PLATFORM_RELATIONSHIPS, are environment-dependent. Unlike the build produced for a given commit, they can’t be reused across environments and only allow your app to connect to a single service instance on a single environment. A file very similar to this is generated automatically for your when using the platform ify command to migrate a codebase to Platform.sh. Note When you create an index on OpenSearch, don’t specify the number_of_shards or number_of_replicas settings in your OpenSearch API call. These values are set automatically based on available resources. Authentication By default, OpenSearch has no authentication. No username or password is required to connect to it. You may optionally enable HTTP Basic authentication. To do so, include the following in your .platform/services.yaml configuration: .platform/services.yaml # The name of the service container. Must be unique within a project. opensearch: type: opensearch:2 disk: 2048 configuration: authentication: enabled: true That enables mandatory HTTP Basic auth on all requests. The credentials are available in any relationships that point at that service, in the username and password properties. Note that the information about the relationship can change when an app is redeployed or restarted or the relationship is changed. So your apps should only rely on the PLATFORM_RELATIONSHIPS environment variable directly rather than hard coding any values. This functionality is generally not required if OpenSearch isn’t exposed on its own public HTTP route. However, certain applications may require it, or it allows you to safely expose OpenSearch directly to the web. To do so, add a route to .platform/routes.yaml that has opensearch:opensearch as its upstream (where opensearch is whatever you named the service). For example: .platform/routes.yaml https://www.os.{default}/ : type: redirect to: https://os.{default}/ https://os.{default}/ : type: upstream upstream: opensearch:opensearch Plugins OpenSearch offers a number of plugins. To enable them, list them under the configuration.plugins key in your .platform/services.yaml file, like so: .platform/services.yaml # The name of the service container. Must be unique within a project. opensearch: type: opensearch:2 disk: 1024 configuration: plugins: - analysis-icu - lang-python In this example you’d have the ICU analysis plugin and the size mapper plugin. If there is a publicly available plugin you need that isn’t listed here, contact support. Available plugins This is the complete list of plugins that can be enabled: Plugin Description 1 2 analysis-icu Support ICU Unicode text analysis * * analysis-kuromoji Japanese language support * * analysis-nori Integrates Lucene Nori analysis module into OpenSearch * * analysis-phonetic Phonetic analysis * * analysis-smartcn Smart Chinese Analysis Plugins * * analysis-stempel Stempel Polish Analysis Plugin * * analysis-ukrainian Ukrainian language support * * ingest-attachment Extract file attachments in common formats (such as PPT, XLS, and PDF) * * mapper-annotated-text Adds support for text fields with markup used to inject annotation tokens into the index * * mapper-murmur3 Murmur3 mapper plugin for computing hashes at index-time * * mapper-size Size mapper plugin, enables the _size meta field * * repository-s3 Support for using S3 as a repository for Snapshot/Restore * * transport-nio Support for NIO transport * * Plugin removal Removing plugins previously added in your .platform/services.yaml file doesn’t automatically uninstall them from your OpenSearch instances. This is deliberate, as removing a plugin may result in data loss or corruption of existing data that relied on that plugin. Removing a plugin usually requires reindexing. To permanently remove a previously enabled plugin, upgrade the service to create a new instance of OpenSearch and migrate to it. In most cases it isn’t necessary as an unused plugin has no appreciable impact on the server. Upgrading The OpenSearch data format sometimes changes between versions in incompatible ways. OpenSearch doesn’t include a data upgrade mechanism as it’s expected that all indexes can be regenerated from stable data if needed. To upgrade (or downgrade) OpenSearch, use a new service from scratch. There are two ways to do so. Destructive In your .platform/services.yaml file, change the version and name of your OpenSearch service. Be sure to also update the reference to the now changed service name in it’s corresponding application’s relationship block. When you push that to Platform.sh, the old service is deleted and a new one with the new name is created with no data. You can then have your application reindex data as appropriate. This approach has the downsides of temporarily having an empty OpenSearch instance, which your application may or may not handle gracefully, and needing to rebuild your index afterward. Depending on the size of your data that could take a while. Transitional With a transitional approach, you temporarily have two OpenSearch services. Add a second OpenSearch service with the new version a new name and give it a new relationship in .platform.app.yaml. You can optionally run in that configuration for a while to allow your application to populate indexes in the new service as well. Once you’re ready to switch over, remove the old OpenSearch service and relationship. You may optionally have the new OpenSearch service use the old relationship name if that’s easier for your app to handle. Your application is now using the new OpenSearch service. This approach has the benefit of never being without a working OpenSearch instance. On the downside, it requires two running OpenSearch servers temporarily, each of which consumes resources and needs adequate disk space. Depending on the size of your data, that may be a lot of disk space. OpenSearch is a distributed RESTful search engine built for the cloud.\nSee the OpenSearch documentation for more information.\nTo switch from Elasticsearch, follow the same procedure as for upgrading.\n",
      "url": "/add-services/opensearch.html",
      "site": "docs",
      "_formatted": {
        "keywords": [],
        "title": "OpenSearch (search service)",
        "section": "Add services",
        "text": " <em>OpenSearch</em> is a distributed RESTful search engine built for the cloud. See the OpenSearch documentation for more information. To switch from Elasticsearch, follow the same procedure as for upgrading. Supported versions Grid Dedicated Gen 3 Dedicated Gen 2 2 1 2 2.5 1.2 On Grid and Dedicated Gen 3, from version 2, you only specify the major version. The latest compatible minor version and patches are applied automatically. On Grid, version 1 represents a rolling release - the latest minor version available from the upstream (starting with opensearch 1.3). You can see the latest minor and patch versions of OpenSearch available from the 2.x and 1.x release lines. Deprecated versions The following versions are still available in your projects, but they’re at their end of life and are no longer receiving security updates from upstream, or are no longer the recommended way to configure the service on Platform.sh. Grid Dedicated Gen 3 Dedicated Gen 2 1.2 1.1 To ensure your project remains stable in the future, switch to a supported version. Relationship reference Example information available through the PLATFORM_RELATIONSHIPS environment variable or by running platform relationships. Note that the information about the relationship can change when an app is…",
        "url": "/add-services/opensearch.html",
        "site": "docs"
      }
    },
    {
      "keywords": [],
      "title": "Forward to an HTTP endpoint",
      "section": "Forward Platform.sh and Blackfire logs",
      "text": " Some third-party services, such as Elasticsearch and OpenSearch, support ingesting log messages through an HTTP endpoint. You can use HTTP forwarding to forward Platform.sh and Blackfire logs to such third-party services.\nHTTP forwarding makes a POST HTTP request with an application/json body while forwarding the log messages to the endpoint.\nAs an example, to forward logs to Elasticsearch using HTTP log forwarding, run the following command:\nplatform integration:add --type httplog --url &#34;https://ELASTICSEARCH_URL/INDEX_NAME/_doc&#34; --header &#34;Authorization: Basic &lt;basic_auth_token&gt;&#34; --header &#34;Content-Type: application/json&#34; type and url are the only properties required for all endpoints. Optionally, you can use the headers property to pass additional headers in the HTTP requests.\nNote that if your endpoint URL includes a PORT, that can also be included in the --url flag:\nplatform integration:add --type httplog --url &#34;https://ELASTICSEARCH_URL:PORT/INDEX_NAME/_doc&#34; --header &#34;Authorization: Basic &lt;basic_auth_token&gt;&#34; --header &#34;Content-Type: application/json&#34; Once you&rsquo;ve added the service, to start forwarding logs trigger a redeploy.\n",
      "url": "/increase-observability/logs/forward-logs.html#forward-to-an-http-endpoint",
      "site": "docs",
      "_formatted": {
        "keywords": [],
        "title": "Forward to an HTTP endpoint",
        "section": "Forward Platform.sh and Blackfire logs",
        "text": " Some third-party services, such as Elasticsearch and <em>OpenSearch</em>, support ingesting log messages through an HTTP endpoint. You can use HTTP forwarding to forward Platform.sh and Blackfire logs to such third-party services.\nHTTP forwarding makes a POST HTTP request with an application/json body while forwarding the log messages to the endpoint.\nAs an example, to forward logs to Elasticsearch using HTTP log forwarding, run the following command:\nplatform integration:add --type httplog --url &#34;https://ELASTICSEARCH_URL/INDEX_NAME/_doc&#34; --header &#34;Authorization: Basic &lt;basic_auth_token&gt;&#34; --header &#34;Content-Type: application/json&#34; type and url are the only properties required for all endpoints. Optionally, you can use the headers property to pass additional headers in the HTTP requests.\nNote that if your endpoint URL includes a PORT, that can also be included in the --url flag:\nplatform integration:add --type httplog --url &#34;https://ELASTICSEARCH_URL:PORT/INDEX_NAME/_doc&#34; --header &#34;Authorization: Basic &lt;basic_auth_token&gt;&#34; --header &#34;Content-Type: application/json&#34; Once you&rsquo;ve added the service, to start forwarding logs trigger a redeploy.\n",
        "url": "/increase-observability/logs/forward-logs.html#forward-to-an-http-endpoint",
        "site": "docs"
      }
    },
    {
      "keywords": [
        "sleepy crons",
        "sleepy_crons"
      ],
      "title": "Container profile reference",
      "section": "Single-runtime image",
      "text": " The following table shows which container profiles Platform.sh applies when deploying your project.\nContainer Profile Chrome Headless HIGH_CPU .NET HIGH_CPU Elasticsearch HIGH_MEMORY Elasticsearch Premium HIGH_MEMORY Elixir HIGH_CPU Go HIGH_CPU InfluxDB HIGH_MEMORY Java HIGH_MEMORY Kafka HIGH_MEMORY Lisp HIGH_CPU MariaDB HIGH_MEMORY Memcached BALANCED MongoDB HIGH_MEMORY MongoDB Premium HIGH_MEMORY Network Storage HIGH_MEMORY Node.js HIGH_CPU OpenSearch HIGH_MEMORY Oracle MySQL HIGH_MEMORY PHP HIGH_CPU PostgreSQL HIGH_MEMORY Python HIGH_CPU RabbitMQ HIGH_MEMORY Redis ephemeral BALANCED Redis persistent BALANCED Ruby HIGH_CPU Rust HIGH_CPU Solr HIGH_MEMORY Varnish HIGH_MEMORY Vault KMS HIGH_MEMORY ",
      "url": "/create-apps/app-reference/single-runtime-image.html#container-profile-reference",
      "site": "docs",
      "_formatted": {
        "keywords": [
          "sleepy crons",
          "sleepy_crons"
        ],
        "title": "Container profile reference",
        "section": "Single-runtime image",
        "text": " The following table shows which container profiles Platform.sh applies when deploying your project.\nContainer Profile Chrome Headless HIGH_CPU .NET HIGH_CPU Elasticsearch HIGH_MEMORY Elasticsearch Premium HIGH_MEMORY Elixir HIGH_CPU Go HIGH_CPU InfluxDB HIGH_MEMORY Java HIGH_MEMORY Kafka HIGH_MEMORY Lisp HIGH_CPU MariaDB HIGH_MEMORY Memcached BALANCED MongoDB HIGH_MEMORY MongoDB Premium HIGH_MEMORY Network Storage HIGH_MEMORY Node.js HIGH_CPU <em>OpenSearch</em> HIGH_MEMORY Oracle MySQL HIGH_MEMORY PHP HIGH_CPU PostgreSQL HIGH_MEMORY Python HIGH_CPU RabbitMQ HIGH_MEMORY Redis ephemeral BALANCED Redis persistent BALANCED Ruby HIGH_CPU Rust HIGH_CPU Solr HIGH_MEMORY Varnish HIGH_MEMORY Vault KMS HIGH_MEMORY ",
        "url": "/create-apps/app-reference/single-runtime-image.html#container-profile-reference",
        "site": "docs"
      }
    },
    {
      "keywords": [
        "sleepy crons",
        "sleepy_crons"
      ],
      "title": "Container profile reference",
      "section": "Composable image",
      "text": " The following table shows which container profiles Platform.sh applies when deploying your project.\nContainer Profile Chrome Headless HIGH_CPU .NET HIGH_CPU Elasticsearch HIGH_MEMORY Elasticsearch Premium HIGH_MEMORY Elixir HIGH_CPU Go HIGH_CPU InfluxDB HIGH_MEMORY Java HIGH_MEMORY Kafka HIGH_MEMORY Lisp HIGH_CPU MariaDB HIGH_MEMORY Memcached BALANCED MongoDB HIGH_MEMORY MongoDB Premium HIGH_MEMORY Network Storage HIGH_MEMORY Node.js HIGH_CPU OpenSearch HIGH_MEMORY Oracle MySQL HIGH_MEMORY PHP HIGH_CPU PostgreSQL HIGH_MEMORY Python HIGH_CPU RabbitMQ HIGH_MEMORY Redis ephemeral BALANCED Redis persistent BALANCED Ruby HIGH_CPU Rust HIGH_CPU Solr HIGH_MEMORY Varnish HIGH_MEMORY Vault KMS HIGH_MEMORY ",
      "url": "/create-apps/app-reference/composable-image.html#container-profile-reference",
      "site": "docs",
      "_formatted": {
        "keywords": [
          "sleepy crons",
          "sleepy_crons"
        ],
        "title": "Container profile reference",
        "section": "Composable image",
        "text": " The following table shows which container profiles Platform.sh applies when deploying your project.\nContainer Profile Chrome Headless HIGH_CPU .NET HIGH_CPU Elasticsearch HIGH_MEMORY Elasticsearch Premium HIGH_MEMORY Elixir HIGH_CPU Go HIGH_CPU InfluxDB HIGH_MEMORY Java HIGH_MEMORY Kafka HIGH_MEMORY Lisp HIGH_CPU MariaDB HIGH_MEMORY Memcached BALANCED MongoDB HIGH_MEMORY MongoDB Premium HIGH_MEMORY Network Storage HIGH_MEMORY Node.js HIGH_CPU <em>OpenSearch</em> HIGH_MEMORY Oracle MySQL HIGH_MEMORY PHP HIGH_CPU PostgreSQL HIGH_MEMORY Python HIGH_CPU RabbitMQ HIGH_MEMORY Redis ephemeral BALANCED Redis persistent BALANCED Ruby HIGH_CPU Rust HIGH_CPU Solr HIGH_MEMORY Varnish HIGH_MEMORY Vault KMS HIGH_MEMORY ",
        "url": "/create-apps/app-reference/composable-image.html#container-profile-reference",
        "site": "docs"
      }
    },
    {
      "keywords": [],
      "title": "Available services",
      "section": "Dedicated Gen 3",
      "text": " Not every service or version available on the Grid is available on Dedicated Gen 3. The following table shows the currently available services and their versions for Dedicated Gen 3.\nService Supported versions Headless Chrome 95 MariaDB/MySQL 10.11 Galera, 10.6 Galera, 10.5 Galera, 10.4 Galera, 10.3 Galera Network Storage 2.0 OpenSearch 2 PostgreSQL 16, 15, 14, 13, 12 RabbitMQ 3.13, 3.12 Redis 7.2, 7.0, 6.2 Ruby 3.3, 3.2, 3.1, 3.0 Solr 9.2, 9.1, 8.11 Vault KMS 1.12 Your app can connect to each service by referencing the exact same environment variables as for Grid environments. See the services documentation for service-specific details.\n",
      "url": "/dedicated-gen-3.html#available-services",
      "site": "docs",
      "_formatted": {
        "keywords": [],
        "title": "Available services",
        "section": "Dedicated Gen 3",
        "text": " Not every service or version available on the Grid is available on Dedicated Gen 3. The following table shows the currently available services and their versions for Dedicated Gen 3.\nService Supported versions Headless Chrome 95 MariaDB/MySQL 10.11 Galera, 10.6 Galera, 10.5 Galera, 10.4 Galera, 10.3 Galera Network Storage 2.0 <em>OpenSearch</em> 2 PostgreSQL 16, 15, 14, 13, 12 RabbitMQ 3.13, 3.12 Redis 7.2, 7.0, 6.2 Ruby 3.3, 3.2, 3.1, 3.0 Solr 9.2, 9.1, 8.11 Vault KMS 1.12 Your app can connect to each service by referencing the exact same environment variables as for Grid environments. See the services documentation for service-specific details.\n",
        "url": "/dedicated-gen-3.html#available-services",
        "site": "docs"
      }
    },
    {
      "keywords": [],
      "title": "Reference",
      "section": "Introduction",
      "text": " The Reference documentation section is the largest and most comprehensive. It includes details of configuration, environment variables, activities, and much more material you can use in your day-to-day work.\nManaged services Services on our platform are managed. You can provision them with a few lines of YAML and quickly connect them to the rest of your environment. No infrastructure expertise is required.\nPopular documentation:\nElasticsearch Gotenberg Headless Chrome InfluxDB Kafka MariaDB/MySQL Memcached MongoDB Network Storage OpenSearch PostgreSQL RabbitMQ Redis Solr Varnish Vault KMS Runtime languages Like services, configure your application containers with one of many supported runtime types.\nPopular documentation:\nC#/.NET Core Elixir Go Java JavaScript/Node.js Lisp PHP Python Ruby Rust Project & environment configuration Delve deeper into how to configure containers, environments, projects, and repositories.\nPopular documentation:\nApplication containers Services & data Routes & requests Environment variables Integrations & activities Regions Advanced topics Learn more about how you can customize and optimize your deployed projects, and further experiment on the platform.\nPopular documentation:\nProject administration Local development with DDEV Observability: Blackfire.io Observability: Infrastructure metrics Security & compliance Workers Sanitizing data Microservices and multi-app projects Submodules Private repositories ",
      "url": "/#reference",
      "site": "docs",
      "_formatted": {
        "keywords": [],
        "title": "Reference",
        "section": "Introduction",
        "text": " The Reference documentation section is the largest and most comprehensive. It includes details of configuration, environment variables, activities, and much more material you can use in your day-to-day work.\nManaged services Services on our platform are managed. You can provision them with a few lines of YAML and quickly connect them to the rest of your environment. No infrastructure expertise is required.\nPopular documentation:\nElasticsearch Gotenberg Headless Chrome InfluxDB Kafka MariaDB/MySQL Memcached MongoDB Network Storage <em>OpenSearch</em> PostgreSQL RabbitMQ Redis Solr Varnish Vault KMS Runtime languages Like services, configure your application containers with one of many supported runtime types.\nPopular documentation:\nC#/.NET Core Elixir Go Java JavaScript/Node.js Lisp PHP Python Ruby Rust Project & environment configuration Delve deeper into how to configure containers, environments, projects, and repositories.\nPopular documentation:\nApplication containers Services & data Routes & requests Environment variables Integrations & activities Regions Advanced topics Learn more about how you can customize and optimize your deployed projects, and further experiment on the platform.\nPopular documentation:\nProject administration Local development with DDEV Observability: Blackfire.io Observability: Infrastructure metrics Security & compliance Workers Sanitizing data Microservices and multi-app projects Submodules Private repositories ",
        "url": "/#reference",
        "site": "docs"
      }
    },
    {
      "keywords": [],
      "title": "Deprecated versions",
      "section": "Elasticsearch (Search service)",
      "text": " The following versions are still available in your projects for free, but they&rsquo;re at their end of life and are no longer receiving security updates from upstream.\nGrid Dedicated Gen 3 Dedicated Gen 2 7.10 7.9 7.7 7.5 7.2 6.8 6.5 5.4 5.2 2.4 1.7 1.4 7.10 7.9 7.7 7.5 7.2 6.8 6.5 7.10 7.9 7.7 7.6 7.5 7.2 6.8 6.5 5.6 5.2 2.4 1.7 To ensure your project remains stable in the future, switch to a premium version.\nAlternatively, you can switch to one of the latest, free versions of OpenSearch. To do so, follow the same procedure as for upgrading.\n",
      "url": "/add-services/elasticsearch.html#deprecated-versions",
      "site": "docs",
      "_formatted": {
        "keywords": [],
        "title": "Deprecated versions",
        "section": "Elasticsearch (Search service)",
        "text": " The following versions are still available in your projects for free, but they&rsquo;re at their end of life and are no longer receiving security updates from upstream.\nGrid Dedicated Gen 3 Dedicated Gen 2 7.10 7.9 7.7 7.5 7.2 6.8 6.5 5.4 5.2 2.4 1.7 1.4 7.10 7.9 7.7 7.5 7.2 6.8 6.5 7.10 7.9 7.7 7.6 7.5 7.2 6.8 6.5 5.6 5.2 2.4 1.7 To ensure your project remains stable in the future, switch to a premium version.\nAlternatively, you can switch to one of the latest, free versions of <em>OpenSearch</em>. To do so, follow the same procedure as for upgrading.\n",
        "url": "/add-services/elasticsearch.html#deprecated-versions",
        "site": "docs"
      }
    }
  ],
  "query": "opensearch",
  "processingTimeMs": 11,
  "limit": 7,
  "offset": 0,
  "estimatedTotalHits": 9
}
