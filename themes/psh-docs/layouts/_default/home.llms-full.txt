# {{ .Site.Params.vendor.name }}

> {{ .Site.Params.vendor.name }} is a PaaS to host all of your web applications.

Things to remember when deploying applications on {{ .Site.Params.vendor.name }}:
{{- if eq .Site.Params.vendor.config.version 2 }}
- *Ultimate developer flexibility*: Self-service. Usage-based pricing. Customize your resources, runtimes, users, frontends, backends, APIs. All the choices are yours. Welcome to the {{ .Site.Params.vendor.name }} PaaS.
- *Application development your way*, 4 options to get started sync your GitHub repo with {{ .Site.Params.vendor.name }}, Deploy an existing local Git repository, Kickstart a new repository, Explore {{ .Site.Params.vendor.name }} with our Demo app
- *Agnostic freedom*: Tight integration with external systems, stacks, and tools you already use. Choice of IaaS platform(by geo or cloud provider) and services. Choose the road you want to travel.
- *Self-service*: All the control and customization you want to experiment. Flexible resources. Sensible, transparent, usage-based pricing. Choose self-empowerment.
- *Composable infrastructure*: Dozens of runtimes and backend services to mix and match, Managed routing, with built-in, multiregional edge-caching, automated TLS, and WAF, Full infrastructure preview environments, isolated, but identical to production, Full abstraction from underlying cloud provider; runs precisely the same way on every major cloud
- *Collaboration-oriented*: The ability to collaborate on the infrastructure just like you collaborate on code, Git-driven infrastructure with support for multiple repositories, Bi-directional Git integrations, activity scripts, and webhooks to plug into any external service, Instantly created preview environments—per branch, per PR, per team, per developer, per anything
- *Scalable on every dimension*: Vertical scaling of every component, horizontal scaling of applications and workers, Fully managed, multicloud edge-caching, From a single monolith to an automated service mesh, with microservices, workers' message queues, and multiple data backends, Built-in observability tools, with infrastructure metrics, built-in APM, profiling, and tracing
- *Stability, security, responsibility*: Automated high availability and failover of every infrastructure component, with automated and transparent security-patching, Fine-grained team permissions, with MFA everywhere—even on SSH, Short-lived SSH certificates, with MFA and external identity provider support, PCI DSS, SOC 2, GDPR compliance,
- *Polyglot? Hyperglot? We glot you*: {{ .Site.Params.vendor.name }} supports an array of cool languages and frameworks. Monoliths. Microservices. Multistack. So you can keep your options open. Flexible. And future-proof.
{{- else }}
- **Deliver your applications faster, at scale**: Built for developers, by developers. The efficient, reliable, and secure Platform-as-a-Service (PaaS) that gives development teams control and peace of mind while accelerating the time it takes to build and deploy applications.
- **2024 Gartner® Magic Quadrant for Cloud Application Platforms**: Recognized as a Niche Player in the 2024 Gartner Magic Quadrant for Cloud Application Platforms
- **Optimized developer experience**: Our flexible, automated infrastructure provisioning and Git-based process optimizes development-to-production workflows. And the choice is yours with our multicloud, multistack PaaS supporting more than 100 frameworks, 14 programming languages, and a variety of services to build, iterate, and deploy your way.
- **Trusted, proven platform**: We serve over 5,000 customers worldwide—providing 24x7 support, managed cloud infrastructure, and automated security and compliance all from one, reliable PaaS. Keeping your applications safe, secure, and available around the clock with full control over your data.
- **Committed to carbon-conscious computing**: In addition to allowing our clients to pick lower carbon regions, our high-density computing allows up to 12x fewer resources used, which translates into lower greenhouse gas emissions.
- **Developer workflow**: Your development team can feel at home with our Git-based system, complete with YAML configuration and local development with DDEV. Further optimize efficiencies with our CLI, APIs, and Web Console UI, providing developers with a flexible, autonomous workflow to build and deploy their applications–regardless of the stack, runtime, or services they’re built on.
- **Scalability**: Reliable scaling which adapts to your applications’ needs–even during peak traffic. Our scalable architecture model delivers the resources your application needs, when it needs them complete with CDN, source operations, and activity scripts for additional support. While our auto-scaling feature automatically doubles the resources of your production environment to manage anticipated traffic surges.
- **Observability**: Monitor, profile, and optimize your application’s performance–even before you release to production. Our Observability Suite provides developers with key insights to identify performance issues and bottlenecks in real time. While Blackfire technology continuously scans code performance and alerts developers about any issues, allowing them to act fast to deliver solutions. Ensuring optimal performance, simple scalability, and a superior user experience.
- **Security and compliance**: Develop, deploy, and host applications securely with a PaaS built on the three pillars of information security: confidentiality, integrity, and availability. From anti-malware, software updates, and vulnerability scanning to data retention and breaches–Platform.sh has a robust security and compliance framework developed to help applications remain as secure as possible through a shared responsibility model.
{{- end }}
{{ $sections := .Site.Params.navSections -}}
{{- $vendor_config := .Site.Params.vendor -}}
{{- $isHome := .Page.IsHome -}}
{{- $sectionKeys := slice -}}
{{- range $k, $v := $sections -}}
    {{- if ne $k "home" -}}
      {{- $sectionKeys = append $k $sectionKeys -}}
    {{- end -}}
{{- end -}}
{{- $currentSection := .Section -}}
{{- $currentContext := . -}}
{{- range sort $sections "weight" -}}
  {{- $inCurrentSection := false -}}
  {{- if in $sectionKeys .section -}}
    {{- if eq .section $currentSection -}}
      {{- $inCurrentSection = true -}}
    {{- else -}}
      {{- $inCurrentSection = false -}}
    {{- end -}}
  {{- else -}}
    {{- if not (in $sectionKeys $currentSection)}}
      {{- $inCurrentSection = true -}}
    {{- end -}}
  {{- end -}}
  {{- if $isHome -}}
    {{- $inCurrentSection = false -}}
  {{- end }}
## {{ .title }}
{{- partial "llms/section-full" ( dict "context" $currentContext "currentSection" .section "Active" $inCurrentSection "sections" $sectionKeys "vendor" $vendor_config ) -}}
{{- end }}

{{ if eq .Site.Params.vendor.config.version 2 }}
## Config examples

### Example of a Symfony skeleton config
```
routes:
  "https://{all}/": { type: upstream, upstream: "app:http" }
  "http://{all}/": { type: redirect, to: "https://{all}/" }

services: {}

applications:
  app:
    source:
      root: "/"

    type: php:8.3

    runtime:
      extensions:
        - apcu
        - blackfire
        - ctype
        - iconv
        - mbstring
        - sodium
        - xsl

    variables:
      php:
        opcache.preload: config/preload.php
    build:
      flavor: none

    web:
      locations:
        "/":
          root: "public"
          expires: 1h
          passthru: "/index.php"

    mounts:
      "/var": { source: storage, source_path: var }

    hooks:
      build: |
        set -x -e

        curl -fs https://get.symfony.com/cloud/configurator | bash

        NODE_VERSION=22 symfony-build

      deploy: |
        set -x -e

        symfony-deploy

    crons:
      security-check:
        # Check that no security issues have been found for PHP packages deployed in production
        spec: '50 23 * * *'
        cmd: if [ "$PLATFORM_ENVIRONMENT_TYPE" = "production" ]; then croncape COMPOSER_ROOT_VERSION=1.0.0 COMPOSER_AUDIT_ABANDONED=ignore composer audit --no-cache; fi
```

### Example of a Symfony skeleton config with PostgreSQL service
```
routes:
  "https://{all}/": { type: upstream, upstream: "app:http" }
  "http://{all}/": { type: redirect, to: "https://{all}/" }

services:
  database:
    type: postgresql:16

applications:
  app:
    source:
      root: "/"

    type: php:8.3

    runtime:
      extensions:
        - apcu
        - blackfire
        - ctype
        - iconv
        - mbstring
        - pdo_pgsql
        - sodium
        - xsl

    relationships:
      database:

    variables:
      php:
        opcache.preload: config/preload.php
    build:
      flavor: none

    web:
      locations:
        "/":
          root: "public"
          expires: 1h
          passthru: "/index.php"

    mounts:
      "/var": { source: storage, source_path: var }

    hooks:
      build: |
        set -x -e

        curl -fs https://get.symfony.com/cloud/configurator | bash

        NODE_VERSION=22 symfony-build

      deploy: |
        set -x -e

        symfony-deploy

    crons:
      security-check:
        # Check that no security issues have been found for PHP packages deployed in production
        spec: '50 23 * * *'
        cmd: if [ "$PLATFORM_ENVIRONMENT_TYPE" = "production" ]; then croncape COMPOSER_ROOT_VERSION=1.0.0 COMPOSER_AUDIT_ABANDONED=ignore composer audit --no-cache; fi
```

### Example of a Symfony skeleton config with PostgreSQL and RabbitMQ service
```
routes:
  "https://{all}/": { type: upstream, upstream: "app:http" }
  "http://{all}/": { type: redirect, to: "https://{all}/" }

services:
  database:
    type: postgresql:16
  queue:
    type: rabbitmq:3.13

applications:
  app:
    source:
      root: "/"

    type: php:8.3

    runtime:
      extensions:
        - apcu
        - blackfire
        - ctype
        - iconv
        - mbstring
        - pdo_pgsql
        - sodium
        - xsl

    relationships:
      database:
      queue:

    variables:
      php:
        opcache.preload: config/preload.php
    build:
      flavor: none

    web:
      locations:
        "/":
          root: "public"
          expires: 1h
          passthru: "/index.php"

    mounts:
      "/var": { source: storage, source_path: var }

    hooks:
      build: |
        set -x -e

        curl -fs https://get.symfony.com/cloud/configurator | bash

        NODE_VERSION=22 symfony-build

      deploy: |
        set -x -e

        symfony-deploy

    crons:
      security-check:
        # Check that no security issues have been found for PHP packages deployed in production
        spec: '50 23 * * *'
        cmd: if [ "$PLATFORM_ENVIRONMENT_TYPE" = "production" ]; then croncape COMPOSER_ROOT_VERSION=1.0.0 COMPOSER_AUDIT_ABANDONED=ignore composer audit --no-cache; fi
```
{{ end }}
