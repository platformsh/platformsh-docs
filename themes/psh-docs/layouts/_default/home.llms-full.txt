{{- $pages := .Site.RegularPages -}}
{{- $upsunUrl := "https://docs.upsun.com" -}}
{{- range $pages -}}
{{- if .Params.title }}# {{ .Parent.Params.title | replaceRE `\{\{[%\|\<]?\ *vendor\/name\ *[\%|\>]?\}\}` "Upsun"  }} [{{ .Params.title | replaceRE `\{\{[%\|\<]?\ *vendor\/name\ *[\%|\>]?\}\}` "Upsun" }}]({{ $upsunUrl }}{{ .RelPermalink }})
{{ end }}
{{- .RenderShortcodes
  | replaceRE `<a href=\"([][a-zA-Z0-9\.\_\!\+\#:='\''\;,\/\{\}\(\)\&><↗\ -]+)?\".*\>(.*)?<\/a>` `[$2]($1)`
  | replaceRE ` ([a-zA-Z0-9\@:-]){2,}="([][a-zA-Z0-9\.\_\!\+:='\''\;,\/\{\}\(\)\&><↗\ -]{0,})"` ``
  | replaceRE `(<!--[][a-zA-Z0-9_\ \/:@()\*\?#,.-]+-->)` ``
  | replaceRE `(<style>[][a-zA-Z0-9\.\_\!\+:='\''\;,\/\{\}\(\)#\&\n\ -]+<\/style>)` ``
  | replaceRE `<div>Terminal<\/div>\n` ``
  | replaceRE `<div>\.upsun\/config\.yaml<\/div>\n` ``
  | replaceRE `<div>export\-config\.sh<\/div>\n` ``
  | replaceRE `<div\nx\-data(.*\n)+>` ""
    | replaceRE `<(pre|var|span|p|div|a).*?>` ``
  | replaceRE `<\/(pre|var|span|p|div|a|li)>` ``
  | replaceRE `<code>([][a-zA-Z0-9\.\_\!\+:='\''\;,\/\{\}\(\)\&↗\ -]+)<\/code>` "`$1`"
  | replaceRE `<code>(.*)+\n` "```\n$1\n"
  | replaceRE `<\/code>` "\n```"
  | replaceRE `<img\ ?\/?>` ``
  | replaceRE `<h3\b[^>]*>\n*\ *(.*)\n*\ *<\/h3>` "\n\n### $1\n"
  | replaceRE `<h4\b[^>]*>\n*\ *(.*)\n*\ *<\/h4>` "\n\n#### $1"
  | replaceRE `<\/br>` " "
  | replaceRE `(\[.*\])?\(\/((.*)?\.md(.*)?)\)` "$1(https://docs.upsun.com/$3.html$4)"
  | replaceRE `\[(.*)?\]\((#.*)?\)` `$1`

  | replaceRE `\ *<thead>(\n|\ )*<tr>(\n|\ )*<th>` "\n| <th>"
  | replaceRE `((\|)?.*<th>(.*)?<\/th>(\n|\ )*)` `$2 $3 |`
  | replaceRE `\ *(\n|\ )*<tr>(\n|\ )*<td>\n*\ *` "\n| <td>"
  | replaceRE `((\|)?.*<td>(.*)?<\/td>(\n|\ )*)` `$2 $3 |`
  | replaceRE `\n\ *<\/?(tbody|thead|table)>` ``
  | replaceRE `\ *<\/?(tr)>` ``

  | replaceRE `\n*<path\b[^>]*>(.*?)<\/path>\n*` ""
  | replaceRE `\n*\ *<\/?(g|path)>` ""
  | replaceRE `<svg>(<title>)?(.*?)(<\/title>)?\n*(.*?)<\/svg>` ""
  | replaceRE `<details>\n` ""
  | replaceRE `<\/details>\n` ""
  | replaceRE `\ *<summary><b>([][a-zA-Z0-9\.\_\!\+:='\''\;,\/\{\}\(\)\&↗\ -]+)<\/b><\/summary>` "**$1**"

  | replaceRE `<title>(.*)?<\/title>` "**$1**"
  | replaceRE `<\/?(ol|ul)>` ""
  | replaceRE `<li>\n?` ` - `

  | replaceRE `<strong>` "**"
  | replaceRE `<\/strong>` "**"
  | replaceRE `(\n\ *)+\n` "\n\n"

  | replaceRE `(\[.*\])?\(\/((\/images\/)?(.*)?(.*)?)\)` "$1(https://docs.upsun.com/$4)"

  | htmlUnescape
-}}
{{- end }}

## Example of a Symfony skeleton config
```
routes:
  "https://{all}/": { type: upstream, upstream: "app:http" }
  "http://{all}/": { type: redirect, to: "https://{all}/" }

services: {}

applications:
  app:
    source:
      root: "/"

    type: php:8.3

    runtime:
      extensions:
        - apcu
        - blackfire
        - ctype
        - iconv
        - mbstring
        - sodium
        - xsl

    variables:
      php:
        opcache.preload: config/preload.php
    build:
      flavor: none

    web:
      locations:
        "/":
          root: "public"
          expires: 1h
          passthru: "/index.php"

    mounts:
      "/var": { source: storage, source_path: var }

    hooks:
      build: |
        set -x -e

        curl -fs https://get.symfony.com/cloud/configurator | bash

        NODE_VERSION=22 symfony-build

      deploy: |
        set -x -e

        symfony-deploy

    crons:
      security-check:
        # Check that no security issues have been found for PHP packages deployed in production
        spec: '50 23 * * *'
        cmd: if [ "$PLATFORM_ENVIRONMENT_TYPE" = "production" ]; then croncape COMPOSER_ROOT_VERSION=1.0.0 COMPOSER_AUDIT_ABANDONED=ignore composer audit --no-cache; fi
```

## Example of a Symfony skeleton config with PostgreSQL service
```
routes:
  "https://{all}/": { type: upstream, upstream: "app:http" }
  "http://{all}/": { type: redirect, to: "https://{all}/" }

services:
  database:
    type: postgresql:16

applications:
  app:
    source:
      root: "/"

    type: php:8.3

    runtime:
      extensions:
        - apcu
        - blackfire
        - ctype
        - iconv
        - mbstring
        - pdo_pgsql
        - sodium
        - xsl

    relationships:
      database:

    variables:
      php:
        opcache.preload: config/preload.php
    build:
      flavor: none

    web:
      locations:
        "/":
          root: "public"
          expires: 1h
          passthru: "/index.php"

    mounts:
      "/var": { source: storage, source_path: var }

    hooks:
      build: |
        set -x -e

        curl -fs https://get.symfony.com/cloud/configurator | bash

        NODE_VERSION=22 symfony-build

      deploy: |
        set -x -e

        symfony-deploy

    crons:
      security-check:
        # Check that no security issues have been found for PHP packages deployed in production
        spec: '50 23 * * *'
        cmd: if [ "$PLATFORM_ENVIRONMENT_TYPE" = "production" ]; then croncape COMPOSER_ROOT_VERSION=1.0.0 COMPOSER_AUDIT_ABANDONED=ignore composer audit --no-cache; fi
```

## Example of a Symfony skeleton config with PostgreSQL and RabbitMQ service
```
routes:
  "https://{all}/": { type: upstream, upstream: "app:http" }
  "http://{all}/": { type: redirect, to: "https://{all}/" }

services:
  database:
    type: postgresql:16
  queue:
    type: rabbitmq:3.13

applications:
  app:
    source:
      root: "/"

    type: php:8.3

    runtime:
      extensions:
        - apcu
        - blackfire
        - ctype
        - iconv
        - mbstring
        - pdo_pgsql
        - sodium
        - xsl

    relationships:
      database:
      queue:

    variables:
      php:
        opcache.preload: config/preload.php
    build:
      flavor: none

    web:
      locations:
        "/":
          root: "public"
          expires: 1h
          passthru: "/index.php"

    mounts:
      "/var": { source: storage, source_path: var }

    hooks:
      build: |
        set -x -e

        curl -fs https://get.symfony.com/cloud/configurator | bash

        NODE_VERSION=22 symfony-build

      deploy: |
        set -x -e

        symfony-deploy

    crons:
      security-check:
        # Check that no security issues have been found for PHP packages deployed in production
        spec: '50 23 * * *'
        cmd: if [ "$PLATFORM_ENVIRONMENT_TYPE" = "production" ]; then croncape COMPOSER_ROOT_VERSION=1.0.0 COMPOSER_AUDIT_ABANDONED=ignore composer audit --no-cache; fi
```
