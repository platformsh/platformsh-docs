name: Link to docs
on: pull_request

env:
  PR_NUMBER: ${{ github.event.number }}

jobs:
  get_url:
    runs-on: ubuntu-latest
    name: 'Get environment URL'
    outputs:
        commit_status: ${{ steps.get_env_url.outputs.env_status }}
        env_url: ${{ steps.get_env_url.outputs.env_url }}  
    steps: 
        - uses: actions/checkout@v2
        - name: Get environment URL
          id: get_env_url
          run: |
            COMMIT_STATUS="pending"
            COMMIT_SHA=${{ github.event.pull_request.head.sha }}

            # Wait for the initial status to be reported as pending or 10 minutes has passed
            STATUSES=$(curl -s https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$COMMIT_SHA  | jq -r 'length')
            STATUS_TRY=0
            until [ $STATUSES != 0 ] || [ $STATUS_TRY == 20 ]; do
              sleep 30
              STATUSES=$(curl -s https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$COMMIT_SHA  | jq -r 'length')
              ((STATUS_TRY+=1))
            done
            
            if [ $STATUSES == 0 ]; then
              echo "No integration with Platform.sh reported. Skipping."
              exit 1
            else
              # Keep trying until deployment either succeeds or fails
              until [ "$COMMIT_STATUS" == "success" ] || [ "$COMMIT_STATUS" == "failure" ]; do
                sleep 30

                ENV_URL=$(curl -s https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$COMMIT_SHA  | jq -r '.[0].target_url')
                COMMIT_STATUS=$(curl -s https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$COMMIT_SHA  | jq -r '.[0].state')
                
                echo "The Platform.sh environment is:"
                echo "$COMMIT_STATUS"
              done
              if [ "$COMMIT_STATUS" == "success" ]; then
                echo "Environment deployed to:"
                echo "$ENV_URL"
              fi

              # Report the final statuses to be used in future jobs
              echo "::set-output name=env_status::$COMMIT_STATUS"
              echo "::set-output name=env_url::$ENV_URL"
            fi

  comment-failure:
    runs-on: ubuntu-latest
    name: Comment that deployment failed
    needs: get_url
    if: needs.get_url.outputs.commit_status == 'failure'
    steps:
      - uses: actions/github-script@v5
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: process.env.PR_NUMBER,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `The environment on Platform.sh failed to deploy. :slightly_frowning_face:\n\nCheck the logs: https://console.platform.sh/projects/652soceglkw4u/pr-${process.env.PR_NUMBER}`
            })

  comment-with-links:
    runs-on: ubuntu-latest
    name: Comment with docs links
    needs: get_url
    if: needs.get_url.outputs.commit_status == 'success'
    env:
      ENV_URL: ${{ needs.get_url.outputs.env_url }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v14.5

      - name: Get all changed files
        id: get-files
        run: |
          files=()
          for file in ${{ steps.changed-files.outputs.all_changed_and_modified_files }}; do

            # Rewrite all Markdown files in the source to be links in the final environment
            if [[ $file = "docs/src/"*".md" ]]; then

              # Remove file extension
              page=${file/.md/.html}

              # Remove initial directory
              page=${page/"docs/src/"/}

              # Shift index pages up a level
              page=${page/"/_index.html"/".html"}
              
              files+=("$ENV_URL$page")
            fi
          done
          echo $(printf "||%s" "${files[@]}")
          echo ::set-output name=changed_files::$(printf "||%s" "${files[@]}")
      
      - name: Comment with links
        uses: actions/github-script@v5
        if: steps.get-files.outputs.changed_files != ''
        env:
          PAGES: ${{ steps.get-files.outputs.changed_files }}
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: process.env.PR_NUMBER,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Your Platform.sh environment has successfully deployed. :rocket:\n\nSee the changed pages:\n${process.env.PAGES.replace(/\|\|/g,"\n- [ ] ")}`
            })

      - name: Comment without links
        uses: actions/github-script@v5
        if: steps.get-files.outputs.changed_files == ''
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: process.env.PR_NUMBER,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Your Platform.sh environment has successfully deployed. :rocket:\n\nSee the site: ${process.env.ENV_URL}`
            })
