name: Get info on PR
on:
  pull_request_target:
    branches: [main]
    types: [labeled,opened,reopened,synchronize]

jobs:
  get_pr_info:
    runs-on: ubuntu-latest
    name: Get info on build from PR
    steps: 
      - uses: actions/checkout@v3
        # Run only for PRs from default repo and approved PRs from forks
        if: github.event.pull_request.head.repo.id == 21975579 || contains(github.event.pull_request.labels.*.name, 'build-fork')
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Fail forked PRs without authorization
        # If a PR is from a fork and doesn't have the `build-fork` label, fail the workflow
        if: github.event.pull_request.head.repo.id != 21975579 && !contains(github.event.pull_request.labels.*.name, 'build-fork')
        run: |
          echo "This PR doesn't have sufficient permission to be built"
          exit 1

      - name: Set branch name
        id: branch_name
        run: |
          # For PRs from non-forked repos
          if [ ${{ github.event.pull_request.head.repo.id }} == 21975579 ]; then
            echo "branch_name=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          # For PRs from forks
          else
            echo "branch_name=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
          fi

      # Set up environment to use the Platform.sh CLI
      - uses: adam7/platformsh-cli-action@v1.1
        with: 
          token: ${{ secrets.PLATFORMSH_CLI_TOKEN }}

      # Get the URL for the deployed environment
      - name: Get environment URL
        id: get_env_url
        run: |
          COMMIT_STATUS="pending"

          # Give time for the activity to be reported
          sleep 60

          # Get the most recent activity -- will be stable throughout based on ID
          LATEST_ACTIVITY_ID=$(platform api:curl /projects/652soceglkw4u/environments/${{ steps.branch_name.outputs.branch_name }}/activities | jq -r '.[0].id')
          LATEST_ACTIVITY=$(platform api:curl /projects/652soceglkw4u/environments/${{ steps.branch_name.outputs.branch_name }}/activities/$LATEST_ACTIVITY_ID)

          # Get the state of the most recent activity
          STATE=$(echo $LATEST_ACTIVITY | jq -r '.state')

          # Set tries to 0 to start countdown to timeout
          STATUS_TRY=0

          # Wait until state is complete or 10 minutes has passed
          until [ $STATE == "complete" ] || [ $STATUS_TRY == 20 ]; do
            sleep 30
            LATEST_ACTIVITY=$(platform api:curl /projects/652soceglkw4u/environments/${{ steps.branch_name.outputs.branch_name }}/activities/$LATEST_ACTIVITY_ID)
            STATE=$(echo $LATEST_ACTIVITY | jq -r '.state')
            ((STATUS_TRY+=1))
          done

          # Get the URL of the environment
          ENV_URL=$(echo $LATEST_ACTIVITY | jq -r '.payload.environment.edge_hostname')
          
          ENV_URL="https://$ENV_URL/"

          # Get the status of the build activity
          COMMIT_STATUS=$(echo $LATEST_ACTIVITY | jq -r '.result')

          # Report findings
          echo "The Platform.sh environment is:"
          echo "$COMMIT_STATUS"
          if [ "$COMMIT_STATUS" == "success" ]; then
            echo "Environment deployed to:"
            echo "$ENV_URL"
          fi

          # Report the final statuses to be used in future jobs
          echo "env_status=$COMMIT_STATUS" >> $GITHUB_OUTPUT
          echo "env_url=$ENV_URL" >> $GITHUB_OUTPUT

      - name: Make artifact files
        run: |
          touch environment_url.txt
          touch pr_comment.txt

      - name: Save PR number
        if: ${{ always() }}
        run: echo ${{ github.event.number }} > pr_number.txt

      - name: Save PR SHA
        if: ${{ always() }}
        run: echo "${{ github.event.pull_request.head.sha }}" > pr_sha.txt

      # If no environment URL, create a report of that
      - name: Create failure report
        if: steps.get_env_url.outputs.env_status == 'failure'
        run: |
          echo -e "The environment on Platform.sh failed to deploy. :slightly_frowning_face:\n\nCheck the logs: https://console.platform.sh/projects/652soceglkw4u/${{ steps.branch_name.outputs.branch_name }}" > pr_comment.txt
        
      # Create a list of relevant changed pages
      - name: Report environment URL
        if: steps.get_env_url.outputs.env_status == 'success'
        run: |
          echo ${{ steps.get_env_url.outputs.env_url }} > environment_url.txt

      - name: Get changed files
        if: steps.get_env_url.outputs.env_status == 'success'
        id: changed-files
        uses: tj-actions/changed-files@v29
        with:
          sha: ${{ github.event.pull_request.head.sha }}
          base_sha: ${{ github.event.pull_request.base.sha }}

      # Create a list of relevant changed pages
      - name: Get list of changed files
        if: steps.get_env_url.outputs.env_status == 'success'
        id: get-files
        env:
          ENV_URL: ${{ steps.get_env_url.outputs.env_url }}
        run: |
          files=()
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do

            # Rewrite all Markdown files in the source to be links in the final environment
            if [[ $file = "docs/src/"*".md" ]]; then

              # Remove file extension
              page=${file/.md/.html}

              # Remove initial directory
              page=${page/"docs/src/"/}

              # Shift index pages up a level
              page=${page/"/_index.html"/".html"}
              
              files+=("$ENV_URL$page")
            fi
          done

          # If there are changed files, return a list
          # Using "\n" here creates problems in passing data to the next step, so replace there instead
          if (( ${#files[@]} != 0 )); then
            echo $(printf "||%s" "${files[@]}")
            echo changed_files=$(printf "||%s" "${files[@]}") >> $GITHUB_OUTPUT
          else
            echo changed_files="" >> $GITHUB_OUTPUT
          fi

      # If there are changed pages, create a comment with a checklist
      - name: Comment with links
        if: steps.get-files.outputs.changed_files != ''
        env:
          PAGES: ${{ steps.get-files.outputs.changed_files }}
        run: |
          echo -e "Your Platform.sh environment has successfully deployed. :rocket:\n\nSee the changed pages:\n${PAGES//||/'\n- [ ] '}" > pr_comment.txt

      # If there are no changed pages, create a comment
      # with a link to general URL
      - name: Comment without links
        if: steps.get-files.outputs.changed_files == '' && steps.get_env_url.outputs.env_status == 'success'
        env:
          ENV_URL: ${{ steps.get_env_url.outputs.env_url }}
        run: |
          echo -e "Your Platform.sh environment has successfully deployed. :rocket:\n\nSee the site:\n$ENV_URL" > pr_comment.txt

      - uses: actions/upload-artifact@v2
        with:
          name: pr-info
          path: |
            environment_url.txt
            pr_comment.txt
            pr_number.txt
            pr_sha.txt
          retention-days: 1
      
      # If environment failed to create, fail the workflow
      - name: Fail workflow
        if: steps.get_env_url.outputs.env_status != 'success'
        run: exit 1
